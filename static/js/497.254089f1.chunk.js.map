{"version":3,"file":"static/js/497.254089f1.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/SearchMovies/SearchMovies.styled.jsx","components/SearchMovies/SearchMovies.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const LinkToDetails = styled(Link)`\n  display: block;\n  padding: 4px 8px;\n  max-width: 520px;\n\n  font-size: 18px;\n  line-height: 1.5;\n  color: ${({ theme }) => theme.colors.primaryText};\n\n  background-color: ${({ theme }) => theme.colors.primaryBg};\n  border: 1px solid ${({ theme }) => theme.colors.secondaryText};\n  border-radius: 8px;\n\n  transition: color\n      ${({ theme }) => `${theme.duration} ${theme.timingFunction}`},\n    background-color\n      ${({ theme }) => `${theme.duration} ${theme.timingFunction}`};\n\n  &:hover,\n  &:focus {\n    color: ${({ theme }) => theme.colors.primary};\n    background-color: ${({ theme }) => theme.colors.secondaryBg};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport * as S from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <S.List>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <S.LinkToDetails to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </S.LinkToDetails>\n        </li>\n      ))}\n    </S.List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n`;\n\nexport const Container = styled.div`\n  position: relative;\n`;\n\nexport const Input = styled.input`\n  padding: 4px 8px;\n\n  color: ${({ theme }) => theme.colors.primaryText};\n\n  border: 3px solid ${({ theme }) => theme.colors.secondaryText};\n  border-radius: 8px;\n  outline: none;\n\n  cursor: pointer;\n\n  transition: border-color\n    ${({ theme }) => `${theme.duration} ${theme.timingFunction}`};\n\n  &:focus {\n    border-color: ${({ theme }) => theme.colors.secondaryBg};\n  }\n`;\n\nexport const ErrorText = styled.p`\n  position: absolute;\n  left: 0;\n\n  margin-top: 4px;\n  padding: 8px;\n  width: 100%;\n\n  font-size: 16px;\n  line-height: 1.5;\n  color: ${({ theme }) => theme.colors.secondaryText};\n\n  background-color: #fafab5;\n  border: 1px solid #e3e342;\n  border-radius: 8px;\n`;\n\nexport const Button = styled.button`\n  padding: 4px 8px;\n\n  font-size: 16px;\n  line-height: 1.5;\n  color: ${({ theme }) => theme.colors.primaryText};\n\n  background-color: ${({ theme }) => theme.colors.primaryBg};\n  border: 1px solid ${({ theme }) => theme.colors.secondaryText};\n  border-radius: 8px;\n\n  cursor: pointer;\n\n  transition: color\n      ${({ theme }) => `${theme.duration} ${theme.timingFunction}`},\n    background-color\n      ${({ theme }) => `${theme.duration} ${theme.timingFunction}`};\n\n  &:hover,\n  &:focus {\n    color: ${({ theme }) => theme.colors.primary};\n    background-color: ${({ theme }) => theme.colors.secondaryBg};\n  }\n`;\n","import { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport PropTypes from 'prop-types';\nimport * as S from './SearchMovies.styled';\n\nconst schema = yup.object().shape({\n  query: yup\n    .string()\n    .matches(/\\s*\\S.*$/, 'Enter something.')\n    .required(),\n});\n\nconst initialValues = {\n  query: '',\n};\n\nconst SearchMovies = ({ onSubmit }) => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(schema), defaultValues: initialValues });\n\n  return (\n    <S.Form\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(({ query }) => {\n        onSubmit(query);\n        reset();\n      })}\n    >\n      <S.Container>\n        <S.Input type=\"text\" {...register('query')} />\n        {errors.query && <S.ErrorText>{errors.query.message}</S.ErrorText>}\n      </S.Container>\n\n      <S.Button type=\"submit\">Search</S.Button>\n    </S.Form>\n  );\n};\n\nexport default SearchMovies;\n\nSearchMovies.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport * as moviesAPI from 'services';\nimport SearchMovies from 'components/SearchMovies/SearchMovies';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(() => searchParams.get('query') ?? '');\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n\n    const fetchMovies = async () => {\n      try {\n        const { results } = await moviesAPI.searchMoviesByQuery(query);\n        setMovies(results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchMovies();\n  }, [query]);\n\n  const handleSubmit = newQuery => {\n    const normalizedQuery = newQuery.trim();\n    setSearchParams({ query: normalizedQuery });\n    setQuery(normalizedQuery);\n  };\n\n  return (\n    <main>\n      <section>\n        <SearchMovies onSubmit={handleSubmit} />\n      </section>\n      <section>\n        <MoviesList movies={movies} />\n      </section>\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["List","styled","LinkToDetails","Link","theme","colors","primaryText","primaryBg","secondaryText","duration","timingFunction","primary","secondaryBg","movies","location","useLocation","map","id","title","to","state","from","Form","Container","Input","ErrorText","Button","schema","yup","shape","query","matches","required","initialValues","onSubmit","useForm","resolver","yupResolver","defaultValues","register","handleSubmit","reset","errors","formState","autoComplete","type","message","useState","setMovies","useSearchParams","searchParams","setSearchParams","get","setQuery","useEffect","fetchMovies","moviesAPI","results","console","log","newQuery","normalizedQuery","trim","MoviesList"],"sourceRoot":""}